globals [
  total-nectar
  light-gradient
  hive-left
  hive-right
  hive-bottom
  hive-top
  flower
  show-debug-info?
  ; Changed this to identify the specific flower agent
  ;;initial-unemployed    ; Number of initial unemployed bees (for slider)
  ;;initial-foragers      ; Number of initial forager bees (for slider)
  ;;initial-larvae        ; Number of initial larvae (for slider)
  ;;brood-area-radius     ; Radius of the brood area (for slider)
]

breed [ foragers forager ]
breed [ storers storer ]
breed [ nurses nurse ]
breed [ unemployeds unemployed ]  ; Only define unemployed breed once
breed [ larvae larva ]
breed [ flowers flower-agent ]   ; Add a new breed for flowers

patches-own [
  nursing-stimulus   ; Chemical hunger signal from larvae
  foraging-stimulus  ; Waggle dance stimulus
  storing-stimulus   ; Tremble dance/storing stimulus
  nectar-stored      ; Nectar in this cell
  is-brood-cell?     ; True if cell contains larva
  is-storage-cell?    ; True if storage area
]

turtles-own [
  task-state         ; Current task: "foraging", "storing", "nursing", "no-task"
  activity-state     ; Current activity (e.g., "fly-out", "unload")
  nectar-load        ; Current nectar carried (0-1.0)
  theta-foraging     ; Threshold for foraging task
  theta-storing      ; Threshold for storing task
  theta-nursing      ; Threshold for nursing task
  search-time        ; Time spent searching for storers (foragers)
]

larvae-own [
  ;hunger   ; Renamed from nectar-load for clarity
  age
  immobile?  ; Explicit flag to prevent movement
]

;;; SETUP PROCEDURES ;;;
to setup
  clear-all
  set show-debug-info? false
  setup-hive
  setup-flower
  setup-patches
  setup-bees
  setup-larvae
  reset-ticks
  set total-nectar 0
end

to setup-hive
  ;; Define hive boundaries on the right third of the world
  set hive-left max-pxcor - (world-width / 2)
  set hive-right max-pxcor
  set hive-bottom min-pycor + 3
  set hive-top max-pycor - 3

  ;; Draw the hive with yellow and red border
  ask patches with [
    pxcor >= hive-left and pxcor <= hive-right and
    pycor >= hive-bottom and pycor <= hive-top
  ] [
    set pcolor yellow
  ]

  ;; Draw red border
  ask patches with [
    (pxcor = hive-left or pxcor = hive-right or
     pycor = hive-bottom or pycor = hive-top) and
    pxcor >= hive-left and pxcor <= hive-right and
    pycor >= hive-bottom and pycor <= hive-top
  ] [
    set pcolor red
  ]

  ;; Hive aperture at bottom-left corner of hive
  ask patch hive-left hive-bottom [
    set pcolor black
  ]
end

to setup-flower
  ;; Clear any existing flowers first
  ask flowers [ die ]

  ;; Calculate fixed position for the flower (left of hive entrance)
  let flower-x hive-left - 5  ; 5 patches left of hive entrance
  let flower-y hive-bottom    ; Same height as hive entrance

  ;; Create the flower at this fixed position
  ask patch flower-x flower-y [
    sprout-flowers 1 [
      set shape "flower"
      set color violet
      set size 1.5
      set heading 0    ; Make sure it's upright
      ;set label "Flower"  ; Optional: add label for clarity
      ;set label-color violet

      ;; Store this turtle in the global variable for future reference
      set flower self
    ]
  ]

  ;; Optional: Mark the path from hive to flower for better visualization
  ask patches with [pxcor = flower-x and pycor >= flower-y - 1 and pycor <= flower-y + 1] [
    set pcolor green - 2
  ]
end

; Add to setup-patches to initialize cell colors
to setup-patches
  ask patches [
    ;; Initialize all patches first
    set is-brood-cell? false
    set is-storage-cell? false
    set nectar-stored 1
    set nursing-stimulus 0    ; Initialize stimuli values
    set foraging-stimulus 0
    set storing-stimulus 0
    set pcolor black  ;; Default color outside hive

    ;; Only set hive properties for patches inside hive
    if (pxcor >= hive-left and pxcor <= hive-right and
        pycor >= hive-bottom and pycor <= hive-top) [
      set is-brood-cell? (distancexy (hive-left + (hive-right - hive-left) / 3)
                                   (hive-bottom + (hive-top - hive-bottom) / 2) < brood-area-radius)
      set is-storage-cell? (pycor > hive-top - 20)
      set light-gradient 3.0 / (distancexy hive-left hive-bottom + 1)

      ;; Basic visualization
      ifelse is-brood-cell?
      [ set pcolor brown - 2 ]
      [ ifelse is-storage-cell?
        [ set pcolor yellow - 2 ]  ; Base color for empty storage
        [ set pcolor brown + 3 ]
      ]
    ]
  ]

  ; Apply the cell coloring to any storage cells that start with nectar
  ask patches with [is-storage-cell? and nectar-stored > 0] [
    update-cell-color
  ]
end

to setup-bees
  create-unemployeds initial-unemployed [
    set shape "bee"
    set color white
    set size 0.8
    set task-state "no-task"
    set theta-foraging 0.5
    set theta-storing 0.5
    set theta-nursing 0.5
    set nectar-load random-float 1

    move-to one-of patches with [
      pxcor >= hive-left and pxcor <= hive-right and
      pycor >= hive-bottom and pycor <= hive-top
    ]
  ]
  create-foragers initial-foragers [
    set shape "bee"
    set color blue
    set size 0.8
    set task-state "foraging"
    set activity-state "start"
    set theta-foraging 0.1
    set nectar-load 0.9
    move-to one-of patches with [
      pxcor >= hive-left and pxcor <= hive-right and
      pycor >= hive-bottom and pycor <= hive-top
    ]
  ]
end

to setup-larvae
  create-larvae initial-larvae [
    set shape "bug"  ; Consider using a non-bee shape
    set color pink
    set size 0.8
    ;set hunger random-float 0.
    set nectar-load random-float 0.33
    set age 0
    set immobile? true  ; Critical - prevents all movement

    ; Move to brood cell and stay there permanently
    move-to one-of patches with [
      pxcor >= hive-left and pxcor <= hive-right and
      pycor >= hive-bottom and pycor <= hive-top and
      is-brood-cell?
    ]

    ; Lock position by remembering the cell
    setxy pxcor pycor  ; Explicitly set position
  ]
end

;;; CHECK FUNCTIONS ;;;
to-report inside-hive?
  ;; More precise boundary checking that excludes the border patches
  report (xcor > hive-left and xcor < hive-right and
          ycor > hive-bottom and ycor < hive-top)
end

to-report at-hive-entrance?
  report (distancexy hive-left hive-bottom < 1)
end

to stay-in-hive-until-exit
  if inside-hive? and not at-hive-entrance? and activity-state = "leave-hive" [
    ;; Create a strong attraction toward the entrance
    facexy hive-left hive-bottom
    fd 0.4
  ]
end

to prevent-wrap
  ;; Only prevent world edge wrapping
  if xcor < min-pxcor [ set xcor min-pxcor ]
  if xcor > max-pxcor [ set xcor max-pxcor ]
  if ycor < min-pycor [ set ycor min-pycor ]
  if ycor > max-pycor [ set ycor max-pycor ]
end

;;; MAIN SIMULATION LOOP ;;;
to go
  ;if ticks >= 10000 [ stop ]  ; Stop condition for demonstration

  ;; Make sure flower exists - create it if missing
  ensure-flower-exists
  prevent-larvae-movement

  update-stimuli
  ask turtles with [breed != flowers] [ perform-activity ]  ; Skip flower agents
  diffuse nursing-stimulus 0.05  ; Chemical signal diffusion (observer context)

  ; Update plots (automatically adds data to plots)
  update-plots

  tick
end

;; New procedure to ensure flower exists
to ensure-flower-exists
  ;; If flower doesn't exist or is invalid, recreate it
  if flower = nobody or not is-turtle? flower [
    setup-flower
  ]
end

;;; STIMULI UPDATE ;;;
;; Update for the update-stimuli procedure to remove old dance effects
to update-stimuli
  ask patches [
    ;; Reduce old stimuli values over time
    set foraging-stimulus foraging-stimulus * 0.95  ;; Decay factor
    set storing-stimulus storing-stimulus * 0.95
    set nursing-stimulus 0

    ;; Reset colors for patches that are not actively stimulated
    if foraging-stimulus < 0.1 and storing-stimulus < 0.1 [
      ;; Only reset color for non-hive patches or normal hive floor
      if pcolor = blue or pcolor = violet [
        ;; Inside hive, restore to appropriate color based on type
        ifelse (pxcor >= hive-left and pxcor <= hive-right and
                pycor >= hive-bottom and pycor <= hive-top) [
          ifelse is-brood-cell? [
            set pcolor brown - 2
          ][
            ifelse is-storage-cell? [
              update-cell-color  ; Preserve nectar levels in storage cells
            ][
              set pcolor brown + 3
            ]
          ]
        ][
          set pcolor black  ;; Outside hive, restore to black
        ]
      ]
    ]
  ]

  ;; Larval hunger signals
  ask larvae [
    ;print nectar-load
    if nectar-load < 0.25 [ ; hunger threshold
      let my-load nectar-load  ;; Store the nectar load in a local variable
      ask patch-here [
        set nursing-stimulus nursing-stimulus + (1 - (my-load / 0.33))
      ]
    ]
  ]
end

;;; BEE ACTIVITIES ;;;
to perform-activity

  ;check-refill

  ifelse task-state = "no-task" [ handle-no-task ]
  [
    if task-state = "foraging" [
      stay-in-hive-until-exit
      handle-foraging
      check-refill
      consume-nectar
      prevent-wrap
      
    ]
    if task-state = "storing" [ 
      handle-storing 
      check-refill
      consume-nectar
      prevent-wrap
    ]
    if task-state = "nursing" [ 
      handle-nursing
      check-refill
      consume-nectar
      prevent-wrap
    ]
  ]

  ;consume-nectar
  ;prevent-wrap
end

to handle-foraging  ; forager procedure
  let hive-entrance-x hive-left
  let hive-entrance-y hive-bottom

  if activity-state = "start" [
    set activity-state "leave-hive"
  ]

  if activity-state = "leave-hive" [
    ;; First ensure we're inside the hive
    if not inside-hive? [
      facexy (hive-left + hive-right) / 2 (hive-bottom + hive-top) / 2
      fd 0.2
      stop
    ]

    ;; Move directly toward the entrance
    facexy hive-entrance-x hive-entrance-y
    fd 0.2

    ;; Only proceed to fly-out when at entrance
    if at-hive-entrance? [
      set activity-state "fly-out"
      ;; Move outside the hive entrance to avoid immediately re-entering
      set xcor hive-entrance-x - 1
    ]
    stop  ; Don't proceed further this tick
  ]

  if activity-state = "fly-out" [
    ;; If we're still at the entrance, move away first
    if at-hive-entrance? [
      set heading 270  ; Face left/west to move away from hive
      fd 0.5
      stop
    ]

    ;; Fly to food source - use the flower agent directly
    if flower != nobody and is-turtle? flower [
      face flower
      fd 0.5
      if distance flower < 1 [
        set nectar-load 1.0  ; Fill with nectar
        set activity-state "fly-home"
      ]
    ]
  ]

  if activity-state = "fly-home" [
    ;; Must approach from the entrance
    if ycor < hive-bottom [  ;; If below entrance, move up to it
      set ycor hive-bottom
      facexy hive-entrance-x hive-entrance-y
    ]
    facexy hive-entrance-x hive-entrance-y
    fd 0.5

    ;; Only enter hive when at entrance
    if at-hive-entrance? [
      ;; Actually move inside the hive before changing state
      set xcor hive-entrance-x + 1  ; Move inside the hive
      set activity-state "seek-storer"
      set search-time 0
    ]
  ]

  if activity-state = "seek-storer" [
    ;; Move deeper into the hive
    set xcor xcor + 0.5

    ;; Find a storer or start looking for one
    let nearby-storer one-of storers in-radius 2
    ifelse nearby-storer != nobody [
      set activity-state "unload-nectar"
      ask nearby-storer [
        set activity-state "receive-nectar"
      ]
    ] [
      ;; Increment search time and check if too long
      set search-time search-time + 1
      if search-time > 10 [
        set activity-state "tremble" ; Signal need for storers

        ;; Move to a random position in the bottom area of the hive for dancing
        move-to-dance-floor
      ]
    ]
  ]

  if activity-state = "collect-nectar" [
    ;; This is now handled in the fly-out section
    set activity-state "fly-home"
  ]

  if activity-state = "unload-nectar" [
    ; Transfer nectar to storer
    set nectar-load 0.5  ; Keep some for self
    set activity-state "waggle"

    ;; Move to a random position in the bottom area of the hive for dancing
    move-to-dance-floor
  ]

  if activity-state = "waggle" [
    ; Perform waggle dance to recruit foragers - smaller area
    rt random 30 - 15
    fd 0.1

    ; Perform the waggle dance effect in a smaller radius (1.2 instead of 3)
    ask patches in-radius 1.2 [
      set foraging-stimulus foraging-stimulus + 1 / (distance myself + 1)
      set pcolor blue
    ]

    ; Finish dance after some time
    if random-float 1 < 0.05 [
      set activity-state "leave-hive"
    ]
  ]

  if activity-state = "tremble" [
    ; Perform tremble dance to recruit storers - smaller area
    rt random 40 - 20
    fd 0.05

    ; Perform the tremble dance effect in a smaller radius (1.0 instead of 3)
    ask patches in-radius 1.0 [
      set storing-stimulus storing-stimulus + 1 / (distance myself + 1)
      set pcolor violet
    ]

    ; Finish dance after some time
    if random-float 1 < 0.1 [
      set activity-state "leave-hive"
    ]
  ]
end

;; New procedure to move bee to dance floor area
to move-to-dance-floor
  ;; Calculate random position in bottom area of hive
  let dance-x hive-left + random (hive-right - hive-left - 2) + 1
  let dance-y hive-bottom + random 3 + 1   ; Stay in bottom area, 1-3 patches up from bottom

  ;; Move to that position
  setxy dance-x dance-y

  ;; Make sure we're still inside the hive (safety check)
  if not inside-hive? [
    move-to one-of patches with [
      pxcor > hive-left and pxcor < hive-right and
      pycor > hive-bottom and pycor < hive-bottom + 4
    ]
  ]
end

to handle-storing  ; storer procedure
  ; First ensure the bee stays in the hive
  if not inside-hive? [
    facexy (hive-left + hive-right) / 2 (hive-bottom + hive-top) / 2
    fd 0.2
    stop
  ]

  if activity-state = "start" [
    set activity-state "wait-for-nectar"
    let target-x random-float (hive-right - hive-left - 2) + hive-left + 1
    let target-y hive-bottom + 1
    setxy target-x target-y
  ]

  if activity-state = "wait-for-nectar" [
    ; Wait for foragers with nectar
    if ycor > (hive-bottom + 3) [
      facexy pxcor (hive-bottom + 1)  ; Stay toward the bottom
      fd 0.2
    ]
    ; Small random movement while waiting
    rt random 30 - 15
    fd 0.1
  ]

  if activity-state = "receive-nectar" [
    ; Get nectar from forager
    set nectar-load nectar-load + 0.9  ; Get 0.9 from forager
    set activity-state "find-storage"
  ]

  if activity-state = "find-storage" [
    ; Only look for storage if we have more than the minimum reserve (0.5)
    ifelse nectar-load > 0.5 [
      ; Find storage cell
      let target-cell min-one-of (patches with [is-storage-cell? and nectar-stored < 1.0]) [distance myself]

      ifelse target-cell != nobody [
        face target-cell
        fd 0.2
        if distance target-cell < 0.1 [
          set activity-state "store-nectar"
        ]
      ] [
        ; If no storage cells available, wander a bit
        rt random 45 - 22
        fd 0.1
      ]
    ] [
      ; We don't have enough nectar to store (below reserve), so go back to waiting
      set activity-state "wait-for-nectar"
    ]
  ]

  if activity-state = "store-nectar" [
    ; Calculate how much nectar we can store while maintaining our 0.5 reserve
    let excess-nectar max (list 0 (nectar-load - 0.5))

    if excess-nectar > 0 [
      ; Calculate available space in the cell
      let available-space 1.0 - [nectar-stored] of patch-here
      let amount-to-store min (list excess-nectar available-space)

      ; Ask the patch to update its stored nectar and color
      ask patch-here [
        set nectar-stored nectar-stored + amount-to-store
        update-cell-color  ; Update the cell color based on new nectar level
      ]

      ; Update bee's nectar load, maintaining the 0.5 minimum
      set nectar-load nectar-load - amount-to-store

      ; Update total nectar count
      set total-nectar total-nectar + amount-to-store
    ]

    ; Go back to waiting for nectar
    set activity-state "wait-for-nectar"
  ]
end

; New procedure to update cell color based on nectar content
to update-cell-color  ; patch procedure
  ;print "Updating cell color"  ; Debug output
  ;if is-storage-cell? [
    ;print "This is a storage cell"  ; More debug
    ; Create a more distinctive color gradient based on nectar level
    ifelse nectar-stored > 0 [
      ; Empty to full: yellow → gold → orange → red
      ifelse nectar-stored > 0.75 [
        set pcolor red        ; Very full (more than 75%)
      ][
        ifelse nectar-stored > 0.5 [
          set pcolor orange   ; Half full (50-75%)
        ][
          ifelse nectar-stored > 0.25 [
            set pcolor yellow + 1  ; Quarter full (25-50%)
          ][
            set pcolor yellow  ; Just starting to fill (0-25%)
          ]
        ]
      ]
    ][
      ; Empty storage cell - light yellow
      set pcolor yellow - 2
    ]

end

to handle-nursing  ; nurse procedure
  ; First ensure the bee stays in the hive
  if not inside-hive? [
    facexy (hive-left + hive-right) / 2 (hive-bottom + hive-top) / 2
    fd 0.2
    stop
  ]

  ; Check nectar levels and refill if needed
  if nectar-load < 0.3 [  ; Lower threshold to check more frequently
    set activity-state "refill-nectar"
  ]

  if activity-state = "start" [
    set activity-state "find-hungry-larva"
  ]

  if activity-state = "refill-nectar" [
    ; Find storage cell with nectar
    let target-cells patches with [is-storage-cell? and nectar-stored > 0.1]

    ifelse any? target-cells [
      let target-cell min-one-of target-cells [distance myself]

      ; Move toward storage
      face target-cell
      fd 0.2  ; Move slower for more precise positioning

      ; When reached, take some nectar
      if distance target-cell < 0.5 [  ; Reduced distance threshold
        let amount-to-take min (list 0.7 [nectar-stored] of target-cell)
        set nectar-load nectar-load + amount-to-take
        ask target-cell [
          set nectar-stored nectar-stored - amount-to-take
          update-cell-color
        ]
        set activity-state "find-hungry-larva"
      ]
    ] [
      ; No nectar available - try to find another nurse to share
      let donors other nurses in-radius 3 with [nectar-load > 0.5]

      ifelse any? donors [
        let donor min-one-of donors [distance myself]
        face donor
        fd 0.2

        if distance donor < 0.5 [
          ask donor [
            set nectar-load nectar-load - 0.3
          ]
          set nectar-load nectar-load + 0.3
          set activity-state "find-hungry-larva"
        ]
      ] [
        ; Wander randomly if no nectar source found
        rt random 90 - 45
        fd 0.1
      ]
    ]
  ]

  if activity-state = "find-hungry-larva" [
    ; Find hungry larvae - look for larvae with low nectar
    let hungry-larvae larvae with [nectar-load < 0.7]  ; Increased threshold

    ifelse any? hungry-larvae [
      let target-larva min-one-of hungry-larvae [distance myself]
      face target-larva
      fd 0.2  ; Move slower for more precise positioning

      ; When reached, feed the larva
      if distance target-larva < 0.5 [  ; Reduced distance threshold
        let feed-amount min (list 0.2 nectar-load)  ; Feed smaller amounts
        if feed-amount > 0 [  ; Only feed if we have nectar
          ask target-larva [
            set nectar-load nectar-load + feed-amount
          ]
          set nectar-load nectar-load - feed-amount
        ]

        ; If we still have nectar, keep feeding others
        ifelse nectar-load > 0.2 [
          set activity-state "find-hungry-larva"  ; Look for more larvae to feed
        ] [
          set activity-state "refill-nectar"  ; Need to refill
        ]
      ]
    ] [
      ; No hungry larvae nearby, wander around the brood area
      rt random 90 - 45
      fd 0.1
    ]
  ]

  ; Add debugging output if needed
  ; if ticks mod 100 = 0 [
  ;   show (word "Nurse " who " state: " activity-state " nectar: " nectar-load)
  ; ]
end

to prevent-larvae-movement
  ask larvae [
    if immobile? [
      setxy pxcor pycor  ; Force staying in place
    ]
  ]
end

to handle-no-task  ; unemployed procedure
  ; First ensure the bee stays in the hive
  if not inside-hive? [
    facexy (hive-left + hive-right) / 2 (hive-bottom + hive-top) / 2
    fd 0.2
    stop
  ]
  ; Emergency refill if critically low
  ;if nectar-load < 0.2 [
  ;  let target-cell nearest-storage-cell  ; Use your existing reporter
  ;  if target-cell != nobody [
  ;    face target-cell
  ;    fd 0.3
  ;    if distance target-cell < 1 [
  ;      ask target-cell [
  ;        let take-amount min (list 0.3 nectar-stored)
  ;        set nectar-stored nectar-stored - take-amount
  ;        update-cell-color
  ;      ]
  ;      set nectar-load nectar-load + 0.3
  ;    ]
  ;  ]
  ;]
  let p-foraging (task-probability "foraging")
  let p-storing (task-probability "storing")
  let p-nursing (task-probability "nursing")

  ; Threshold-based task selection
  if random-float 1 < p-foraging [ switch-to-task "foraging" ]
  if random-float 1 < p-storing [ switch-to-task "storing" ]
  if random-float 1 < p-nursing [ switch-to-task "nursing" ]

  ; Random movement
  rt random 30 - 10
  fd 0.1
end

to-report task-probability [task-type]
  let s 0
  let threshold 0

  if task-type = "foraging" [
    set s [foraging-stimulus] of patch-here
    set threshold theta-foraging
  ]
  if task-type = "storing" [
    set s [storing-stimulus] of patch-here
    set threshold theta-storing
  ]
  if task-type = "nursing" [
    set s [nursing-stimulus] of patch-here
    set threshold theta-nursing
  ]

  ; Response threshold function (Equation 12 from literature)
  ifelse s > 0 [
    report (s ^ 2) / (s ^ 2 + (threshold ^ 2))
  ][
    report 0
  ]
end

to switch-to-task [new-task]
  if new-task = "foraging" [
    set breed foragers
    set color blue
  ]
  if new-task = "storing" [
    set breed storers
    set color green
  ]
  if new-task = "nursing" [
    set breed nurses
    set color yellow
  ]

  set task-state new-task
  set activity-state "start"
  set shape "bee"
  set size 0.8
end

;;; UTILITIES ;;;
to check-refill  ; turtle procedure
  ; Only try to refill if nectar is low and we're not currently foraging
  if nectar-load < 0.3 [;and (task-state != "foraging" or
      ;(task-state = "foraging" and (activity-state = "waggle" or activity-state = "tremble"))) [

    ; First make sure we're inside the hive
    if not inside-hive? [
      facexy (hive-left + hive-right) / 2 (hive-bottom + hive-top) / 2
      fd 0.3
      stop
    ]

    ; Find storage cell with nectar - prefer cells with more nectar
    let nectar-cells patches with [is-storage-cell? and nectar-stored > 0.2]

    ifelse any? nectar-cells [
      let target-cell max-one-of nectar-cells [nectar-stored]

      ; If we're not already at the nectar cell, move toward it
      ifelse distance target-cell > 1 [
        face target-cell
        fd 0.3
      ][
        ; We're at the cell, take some nectar
        let amount-to-take min (list 0.5 [nectar-stored] of patch-here)
        set nectar-load nectar-load + amount-to-take

        ; Update cell's nectar and color
        ask patch-here [
          set nectar-stored nectar-stored - amount-to-take
          update-cell-color  ; Important: update color after taking nectar
        ]

        ; Visually show the refill by temporarily changing the bee's size
        ;set size size + 0.2
        ;set size size - 0.2
      ]
    ][
      ; No storage cells with nectar, look for other bees with nectar to share
      let nearby-bee one-of other turtles in-radius 2 with [nectar-load > 0.4 and breed != larvae]
      if nearby-bee != nobody [
        let amount-to-share 0.2
        ask nearby-bee [
          set nectar-load nectar-load - amount-to-share
        ]
        set nectar-load nectar-load + amount-to-share
      ]
    ]
  ]
end

to consume-nectar
  ifelse activity-state = "fly-out" or activity-state = "fly-home" [
    set nectar-load nectar-load - 0.0004  ; High metabolic rate when flying
  ][
    set nectar-load nectar-load - 0.001  ; Lower metabolic rate when in hive
  ]

  set nectar-load nectar-load - 0.0004

  if nectar-load <= 0 [
      die
  ]
end




;to consume-nectar  ; turtle procedure
  ;if breed = larvae [
    ;print nectar-load
 ;   if nectar-load <= 0 [
  ;    die
   ; ]
  ;]
  ; Different consumption rates based on activity
;  ifelse activity-state = "fly-out" or activity-state = "fly-home" [
;    set nectar-load nectar-load - 0.001  ; High metabolic rate when flying
;  ][
;    set nectar-load nectar-load - 0.002  ; Lower metabolic rate when in hive
;  ]

  ; Instead of dying immediately, give bees chance to refill
;  if nectar-load <= 0 [
    ;ifelse inside-hive? [
      ; Emergency protocol - move toward storage area
    ;  let storage-area one-of patches with [is-storage-cell?]
    ;  if storage-area != nobody [
    ;    face storage-area
    ;    fd 0.5
    ;  ]
      ; Give a tiny bit of nectar to prevent immediate death
    ;  set nectar-load 0.1
    ;][
      ; If outside and completely out of nectar, die
 ;     die
    ;]
 ; ]
;end

to-report storage-cells-colored-correctly?
  let problem-cells patches with [
    is-storage-cell? and (
      (nectar-stored > 0.75 and pcolor != red) or
      (nectar-stored > 0.5 and nectar-stored <= 0.75 and pcolor != orange) or
      (nectar-stored > 0.25 and nectar-stored <= 0.5 and pcolor != yellow + 1) or
      (nectar-stored > 0 and nectar-stored <= 0.25 and pcolor != yellow) or
      (nectar-stored = 0 and pcolor != yellow - 2)
    )
  ]

  report count problem-cells = 0
end

to-report nearest-storage-cell
  report min-one-of (patches with [is-storage-cell? and nectar-stored > 0.1]) [distance myself]
end